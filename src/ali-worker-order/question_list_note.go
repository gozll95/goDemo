package workorder

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) QuestionListNote(request *QuestionListNoteRequest) (response *QuestionListNoteResponse, err error) {
	response = CreateQuestionListNoteResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) QuestionListNoteWithChan(request *QuestionListNoteRequest) (<-chan *QuestionListNoteResponse, <-chan error) {
	responseChan := make(chan *QuestionListNoteResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.QuestionListNote(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) QuestionListNoteWithCallback(request *QuestionListNoteRequest, callback func(response *QuestionListNoteResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *QuestionListNoteResponse
		var err error
		defer close(result)
		response, err = client.QuestionListNote(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type QuestionListNoteRequest struct {
	*requests.RpcRequest
	QuestionId string `position:"Query" name:"QuestionId"`
}

type QuestionListNoteResponse struct {
	*responses.BaseResponse
	Success    bool   `json:"Success" xml:"Success"`
	Code       string `json:"Code" xml:"Code"`
	Message    string `json:"Message" xml:"Message"`
	Count      int    `json:"Count" xml:"Count"`
	ListResult struct {
		NoteInfo []struct {
			Content      string `json:"Content" xml:"Content"`
			FromOfficial bool   `json:"FromOfficial" xml:"FromOfficial"`
			GmtCreated   int    `json:"GmtCreated" xml:"GmtCreated"`
			NoteType     string `json:"NoteType" xml:"NoteType"`
			AttachIds    struct {
				AttachId []string `json:"attachId" xml:"attachId"`
			} `json:"attachIds" xml:"attachIds"`
		} `json:"NoteInfo" xml:"NoteInfo"`
	} `json:"ListResult" xml:"ListResult"`
}

func CreateQuestionListNoteRequest() (request *QuestionListNoteRequest) {
	request = &QuestionListNoteRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Workorder", "2016-09-19", "QuestionListNote", "", "")
	return
}

func CreateQuestionListNoteResponse() (response *QuestionListNoteResponse) {
	response = &QuestionListNoteResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
