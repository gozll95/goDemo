package workorder

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) Add(request *AddRequest) (response *AddResponse, err error) {
	response = CreateAddResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) AddWithChan(request *AddRequest) (<-chan *AddResponse, <-chan error) {
	responseChan := make(chan *AddResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.Add(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) AddWithCallback(request *AddRequest, callback func(response *AddResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *AddResponse
		var err error
		defer close(result)
		response, err = client.Add(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type AddRequest struct {
	*requests.RpcRequest
	SecContent               string           `position:"Query" name:"secContent"`
	Attachments              string           `position:"Query" name:"attachments"`
	ProductId                requests.Integer `position:"Query" name:"productId"`
	Phone                    string           `position:"Query" name:"phone"`
	AliUid                   requests.Integer `position:"Query" name:"aliUid"`
	Title                    string           `position:"Query" name:"title"`
	Content                  string           `position:"Query" name:"content"`
	CustomerCommonQuestionId requests.Integer `position:"Query" name:"customerCommonQuestionId"`
	Email                    string           `position:"Query" name:"email"`
	SmsAlertTime             string           `position:"Query" name:"smsAlertTime"`
}

type AddResponse struct {
	*responses.BaseResponse
	Success bool   `json:"success" xml:"success"`
	Code    string `json:"code" xml:"code"`
	Message string `json:"message" xml:"message"`
	Data    string `json:"data" xml:"data"`
}

func CreateAddRequest() (request *AddRequest) {
	request = &AddRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Workorder", "2016-09-19", "Add", "", "")
	return
}

func CreateAddResponse() (response *AddResponse) {
	response = &AddResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
