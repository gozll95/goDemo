package workorder

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

func (client *Client) GetOSSTempAuthor(request *GetOSSTempAuthorRequest) (response *GetOSSTempAuthorResponse, err error) {
	response = CreateGetOSSTempAuthorResponse()
	err = client.DoAction(request, response)
	return
}

func (client *Client) GetOSSTempAuthorWithChan(request *GetOSSTempAuthorRequest) (<-chan *GetOSSTempAuthorResponse, <-chan error) {
	responseChan := make(chan *GetOSSTempAuthorResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.GetOSSTempAuthor(request)
		responseChan <- response
		errChan <- err
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

func (client *Client) GetOSSTempAuthorWithCallback(request *GetOSSTempAuthorRequest, callback func(response *GetOSSTempAuthorResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *GetOSSTempAuthorResponse
		var err error
		defer close(result)
		response, err = client.GetOSSTempAuthor(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

type GetOSSTempAuthorRequest struct {
	*requests.RpcRequest
}

type GetOSSTempAuthorResponse struct {
	*responses.BaseResponse
	Success bool   `json:"success" xml:"success"`
	Code    string `json:"code" xml:"code"`
	Message string `json:"message" xml:"message"`
	Data    struct {
		AccessId  string `json:"accessId" xml:"accessId"`
		Expire    string `json:"expire" xml:"expire"`
		Host      string `json:"host" xml:"host"`
		Policy    string `json:"policy" xml:"policy"`
		Dir       string `json:"dir" xml:"dir"`
		Signature string `json:"signature" xml:"signature"`
	} `json:"data" xml:"data"`
}

func CreateGetOSSTempAuthorRequest() (request *GetOSSTempAuthorRequest) {
	request = &GetOSSTempAuthorRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Workorder", "2016-09-19", "GetOSSTempAuthor", "", "")
	return
}

func CreateGetOSSTempAuthorResponse() (response *GetOSSTempAuthorResponse) {
	response = &GetOSSTempAuthorResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
